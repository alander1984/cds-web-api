/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken', null, global);
goog.exportSymbol('proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest', null, global);
goog.exportSymbol('proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest', null, global);
goog.exportSymbol('proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.displayName = 'proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.displayName = 'proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.displayName = 'proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.displayName = 'proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.toObject = function(includeInstance, msg) {
  var obj = {
    errorcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription;
  return proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string errorCode = 1;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.getErrorcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.setErrorcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pass: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    granttype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 5, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest;
  return proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGranttype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGranttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pass = 2;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setPass = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientId = 3;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string grantType = 4;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getGranttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setGranttype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string secret = 5;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setSecret = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string scope = 6;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AuthenticationRequest.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.toObject = function(opt_includeInstance) {
  return proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.toObject = function(includeInstance, msg) {
  var obj = {
    jti: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: (f = msg.getError()) && proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken;
  return proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJti(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = new proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription;
      reader.readMessage(value,proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJti();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jti = 1;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.getJti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.setJti = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ErrorDescription error = 3;
 * @return {?proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.getError = function() {
  return /** @type{?proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription} */ (
    jspb.Message.getWrapperField(this, proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription, 3));
};


/** @param {?proto.tech.lmru.auth.grpc.service.generated.impl.ErrorDescription|undefined} value */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.AccessToken.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.toObject = function(includeInstance, msg) {
  var obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest;
  return proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tech.lmru.auth.grpc.service.generated.impl.CheckTokenRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.tech.lmru.auth.grpc.service.generated.impl);
